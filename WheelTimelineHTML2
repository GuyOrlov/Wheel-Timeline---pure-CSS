WheelTimelineHTML2 = 
VAR SelectedYear = SELECTEDVALUE(YearTable[Value], 2000)
VAR Index = SelectedYear - 2000

RETURN
"
<!DOCTYPE html>
<html lang='en'>
<head>
  <meta charset='UTF-8' />
  <title>Wheel Timeline Dynamic</title>
  <style>
    body {
      background-color: #181818;
      color: #fff;
      font-family: Arial, sans-serif;
      margin: 0;
      height: 100vh;
    }
    input[type='radio'] {
      position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px;
      overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border-width: 0;
    }
    .cards-container {
      --base-rotation: 0deg; --full-circle: 360deg; --radius: 30vw; --duration: 200ms;
      --cards-container-size: calc(var(--radius) * 2); --cards-container-padding: 2rem;
      --border-color: transparent; --label-offset: calc(var(--radius) * -0.85 - 1rem);
      --label-size: 30px; --label-color: #999; --label-color-hover: steelblue;
      --label-line-h: 0; --label-line-h-current: 2rem; --label-dot-size: 10px;
      --title-top: 5rem; --title-offset-y: 30px; --info-top: 9rem;
      --info-width: min(70%, 500px); --info-offset-y: 30px;
      box-sizing: content-box; position: fixed; inset: 0; margin: 5rem auto;
      width: var(--cards-container-size); height: var(--cards-container-size);
      padding: var(--cards-container-padding);
      clip-path: polygon(0 0, 100% 0, 100% 50%, 0 50%);
    }
    .cards {
      position: absolute; inset: var(--cards-container-padding); aspect-ratio: 1;
      border-radius: 50%; border: 1px solid var(--border-color);
      transition: transform 0.3s ease-in-out var(--duration); list-style: none;
    }
    .cards li {
      position: absolute; inset: 0; transform-origin: center;
      display: grid; place-content: center;
      transform: rotate(calc(var(--i) * 360deg / var(--items)));
      pointer-events: none; opacity: 0.3;
    }
    .cards li:has(input:checked) { opacity: 1; }
    .cards li > label {
      position: absolute; inset: 0; margin: auto;
      transform: translateY(var(--label-offset));
      width: var(--label-size); height: var(--label-size);
      cursor: pointer; pointer-events: initial; text-align: center;
      color: var(--label-color); transition: var(--duration) ease-in-out;
    }
    .cards li > label::before {
      content: ''; position: absolute; top: var(--cards-container-padding);
      left: 50%; translate: -50% 0; width: var(--label-dot-size);
      height: var(--label-dot-size); border-radius: 50%;
      background-color: var(--label-color);
      transition: background-color var(--duration) ease-in-out;
    }
    .cards li > label::after {
      content: ''; position: absolute; top: 100%; left: 50%; translate: -50% 5px;
      width: 2px; height: var(--label-line-h); background-color: steelblue;
      transition: height 300ms ease-in-out var(--label-line-delay,0ms);
    }
    .cards li > label:hover { --label-color: var(--label-color-hover); }
    .cards > li > h2, .cards > li > p {
      position: absolute; left: 50%; transform: translate(-50%, 0);
      text-align: center; color: #fff;
    }
    .cards > li > h2 {
      top: var(--title-top); font-size: 2rem; font-weight: bold;
      opacity: var(--title-opacity,0);
      translate: 0 var(--title-offset-y);
      transition: var(--duration) ease-in-out var(--title-delay,0ms);
    }
    .cards > li > p {
      top: var(--info-top); margin: 0 auto; width: var(--info-width);
      font-size: 1rem; line-height: 1.4; opacity: var(--info-opacity,0);
      transition: var(--duration) ease-in-out var(--info-delay,0ms);
    }
    li:has(input:checked) {
      --label-color: var(--label-color-hover);
      --label-line-h: var(--label-line-h-current);
      --label-line-delay: calc(var(--duration) * 2);
      --title-opacity: 1; --title-offset-y: 0; --title-delay: calc(var(--duration) * 3);
      --info-opacity: 1; --info-offset-y: 0; --info-delay: calc(var(--duration) * 4);
    }
    .cards:has(input:checked) {
      transform: rotate(calc(var(--base-rotation) - (var(--index) * var(--full-circle) / var(--items))));
    }
    " & CONCATENATEX(
      GENERATESERIES(0, 25, 1),
      ".cards:has(li:nth-child(" & [Value]+1 & ")>input:checked) { --index: " & [Value] & "; }",
      UNICHAR(10)
    ) & "
  </style>
</head>
<body>
  <div class='cards-container'>
    <ul class='cards' style='--items: 26;'>" &
        CONCATENATEX(
        GENERATESERIES(0, 25, 1),
        VAR i = [Value]
        VAR Year = 2000 + i
        VAR checkedAttr = IF(i = Index, "checked", "")
        RETURN
            "<li style='--i: " & i & ";'>
            <input type='radio' id='item-" & i & "' name='gallery-item' " & checkedAttr & ">
            <label for='item-" & i & "'>" & Year & "</label>
            <h2>" & Year & "</h2>
            <p>Event or milestone in " & Year & ".</p>
            </li>",
        UNICHAR(10)
        )
 &
    "</ul>
  </div>
</body>
</html>
"
